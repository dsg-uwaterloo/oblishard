// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: leadernotif.proto

package leadernotif

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeaderNotifClient is the client API for LeaderNotif service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaderNotifClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishReply, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (LeaderNotif_SubscribeClient, error)
}

type leaderNotifClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderNotifClient(cc grpc.ClientConnInterface) LeaderNotifClient {
	return &leaderNotifClient{cc}
}

func (c *leaderNotifClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishReply, error) {
	out := new(PublishReply)
	err := c.cc.Invoke(ctx, "/leadernotif.LeaderNotif/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderNotifClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (LeaderNotif_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &LeaderNotif_ServiceDesc.Streams[0], "/leadernotif.LeaderNotif/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &leaderNotifSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LeaderNotif_SubscribeClient interface {
	Recv() (*LeaderChange, error)
	grpc.ClientStream
}

type leaderNotifSubscribeClient struct {
	grpc.ClientStream
}

func (x *leaderNotifSubscribeClient) Recv() (*LeaderChange, error) {
	m := new(LeaderChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LeaderNotifServer is the server API for LeaderNotif service.
// All implementations must embed UnimplementedLeaderNotifServer
// for forward compatibility
type LeaderNotifServer interface {
	Publish(context.Context, *PublishRequest) (*PublishReply, error)
	Subscribe(*SubscribeRequest, LeaderNotif_SubscribeServer) error
	mustEmbedUnimplementedLeaderNotifServer()
}

// UnimplementedLeaderNotifServer must be embedded to have forward compatible implementations.
type UnimplementedLeaderNotifServer struct {
}

func (UnimplementedLeaderNotifServer) Publish(context.Context, *PublishRequest) (*PublishReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedLeaderNotifServer) Subscribe(*SubscribeRequest, LeaderNotif_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedLeaderNotifServer) mustEmbedUnimplementedLeaderNotifServer() {}

// UnsafeLeaderNotifServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaderNotifServer will
// result in compilation errors.
type UnsafeLeaderNotifServer interface {
	mustEmbedUnimplementedLeaderNotifServer()
}

func RegisterLeaderNotifServer(s grpc.ServiceRegistrar, srv LeaderNotifServer) {
	s.RegisterService(&LeaderNotif_ServiceDesc, srv)
}

func _LeaderNotif_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderNotifServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leadernotif.LeaderNotif/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderNotifServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderNotif_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LeaderNotifServer).Subscribe(m, &leaderNotifSubscribeServer{stream})
}

type LeaderNotif_SubscribeServer interface {
	Send(*LeaderChange) error
	grpc.ServerStream
}

type leaderNotifSubscribeServer struct {
	grpc.ServerStream
}

func (x *leaderNotifSubscribeServer) Send(m *LeaderChange) error {
	return x.ServerStream.SendMsg(m)
}

// LeaderNotif_ServiceDesc is the grpc.ServiceDesc for LeaderNotif service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaderNotif_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leadernotif.LeaderNotif",
	HandlerType: (*LeaderNotifServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _LeaderNotif_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _LeaderNotif_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "leadernotif.proto",
}
